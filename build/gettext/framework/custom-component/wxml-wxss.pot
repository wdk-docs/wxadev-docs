# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Nosy
# This file is distributed under the same license as the wxadev package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: wxadev \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 22:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/framework/custom-component/wxml-wxss.rst:2
msgid "组件模板和样式"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:4
msgid "类似于页面，自定义组件拥有自己的 wxml 模板和 wxss 样式。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:6
msgid "组件模板 组件模板的写法与页面模板相同。组件模板与组件数据结合后生成的节点树，将被插入到组件的引用位置上。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:9
msgid "在组件模板中可以提供一个 <slot> 节点，用于承载组件引用时提供的子节点。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:11
#: ../../source/framework/custom-component/wxml-wxss.rst:32
#: ../../source/framework/custom-component/wxml-wxss.rst:94
#: ../../source/framework/custom-component/wxml-wxss.rst:111
#: ../../source/framework/custom-component/wxml-wxss.rst:123
#: ../../source/framework/custom-component/wxml-wxss.rst:141
msgid "代码示例："
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:13
#: ../../source/framework/custom-component/wxml-wxss.rst:96
#: ../../source/framework/custom-component/wxml-wxss.rst:125
#: ../../source/framework/custom-component/wxml-wxss.rst:143
msgid "在开发者工具中预览效果"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:15
#: ../../source/framework/custom-component/wxml-wxss.rst:59
msgid "<!-- 组件模板 --> <view class=\"wrapper\">"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:17
msgid "<view>这里是组件的内部节点</view> <slot></slot>"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:19
msgid "</view> <!-- 引用组件的页面模板 --> <view>"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:23
#: ../../source/framework/custom-component/wxml-wxss.rst:72
msgid "<component-tag-name>"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:23
#: ../../source/framework/custom-component/wxml-wxss.rst:37
msgid "<!-- 这部分内容将被放置在组件 <slot> 的位置上 --> <view>这里是插入到组件slot中的内容</view>"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:25
#: ../../source/framework/custom-component/wxml-wxss.rst:39
#: ../../source/framework/custom-component/wxml-wxss.rst:74
msgid "</component-tag-name>"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:26
msgid "</view> 注意，在模板中引用到的自定义组件及其对应的节点名需要在 json 文件中显式定义，否则会被当作一个无意义的节点。除此以外，节点名也可以被声明为抽象节点。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:29
msgid "模板数据绑定 与普通的 WXML 模板类似，可以使用数据绑定，这样就可以向子组件的属性传递动态数据。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:34
#: ../../source/framework/custom-component/wxml-wxss.rst:67
msgid "<!-- 引用组件的页面模板 --> <view>"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:37
msgid "<component-tag-name prop-a=\"{{dataFieldA}}\" prop-b=\"{{dataFieldB}}\">"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:40
msgid "</view> 在以上例子中，组件的属性 propA 和 propB 将收到页面传递的数据。页面可以通过 setData 来改变绑定的数据字段。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:43
msgid "注意：这样的数据绑定只能传递 JSON 兼容数据。自基础库版本 2.0.9 开始，还可以在数据中包含函数（但这些函数不能在 WXML 中直接调用，只能传递给子组件）。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:45
msgid "组件wxml的slot 在组件的wxml中可以包含 slot 节点，用于承载组件使用者提供的wxml结构。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:48
msgid "默认情况下，一个组件的wxml中只能有一个slot。需要使用多slot时，可以在组件js中声明启用。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:54
msgid "Component({"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:51
#: ../../source/framework/custom-component/wxml-wxss.rst:147
msgid "options: {"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:52
msgid "multipleSlots: true // 在组件定义时的选项中启用多slot支持"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:53
msgid "}, properties: { /* ... */ }, methods: { /* ... */ }"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:56
msgid "}) 此时，可以在这个组件的wxml中使用多个slot，以不同的 name 来区分。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:61
msgid "<slot name=\"before\"></slot> <view>这里是组件的内部细节</view> <slot name=\"after\"></slot>"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:64
msgid "</view> 使用时，用 slot 属性来将节点插入到不同的slot上。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:70
msgid "<!-- 这部分内容将被放置在组件 <slot name=\"before\"> 的位置上 --> <view slot=\"before\">这里是插入到组件slot name=\"before\"中的内容</view> <!-- 这部分内容将被放置在组件 <slot name=\"after\"> 的位置上 --> <view slot=\"after\">这里是插入到组件slot name=\"after\"中的内容</view>"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:75
msgid "</view> 组件样式 组件对应 wxss 文件的样式，只对组件wxml内的节点生效。编写组件样式时，需要注意以下几点："
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:79
msgid "组件和引用组件的页面不能使用id选择器（#a）、属性选择器（[a]）和标签名选择器，请改用class选择器。 组件和引用组件的页面中使用后代选择器（.a .b）在一些极端情况下会有非预期的表现，如遇，请避免使用。 子元素选择器（.a>.b）只能用于 view 组件与其子节点之间，用于其他组件可能导致非预期的情况。 继承样式，如 font 、 color ，会从组件外继承到组件内。 除继承样式外， app.wxss 中的样式、组件所在页面的的样式对自定义组件无效。 #a { } /* 在组件中不能使用 */ [a] { } /* 在组件中不能使用 */ button { } /* 在组件中不能使用 */ .a > .b { } /* 除非 .a 是 view 组件节点，否则不一定会生效 */ 除此以外，组件可以指定它所在节点的默认样式，使用 :host 选择器（需要包含基础库 1.7.2 或更高版本的开发者工具支持）。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:98
msgid "/* 组件 custom-component.wxss */ :host {"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:100
msgid "color: yellow;"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:101
msgid "} <!-- 页面的 WXML --> <custom-component>这段文本是黄色的</custom-component> 外部样式类 有时，组件希望接受外部传入的样式类。此时可以在 Component 中用 externalClasses 定义段定义若干个外部样式类。这个特性从小程序基础库版本 1.9.90 开始支持。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:107
msgid "这个特性可以用于实现类似于 view 组件的 hover-class 属性：页面可以提供一个样式类，赋予 view 的 hover-class ，这个样式类本身写在页面中而非 view 组件的实现中。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:109
msgid "注意：在同一个节点上使用普通样式类和外部样式类时，两个类的优先级是未定义的，因此最好避免这种情况。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:113
#: ../../source/framework/custom-component/wxml-wxss.rst:145
msgid "/* 组件 custom-component.js */ Component({"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:115
msgid "externalClasses: ['my-class']"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:116
msgid "}) <!-- 组件 custom-component.wxml --> <custom-component class=\"my-class\">"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:119
msgid "这段文本的颜色由组件外的 class 决定"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:120
msgid "</custom-component> 这样，组件的使用者可以指定这个样式类对应的 class ，就像使用普通属性一样。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:127
msgid "<!-- 页面的 WXML --> <custom-component my-class=\"red-text\" /> .red-text {"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:130
#: ../../source/framework/custom-component/wxml-wxss.rst:157
msgid "color: red;"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:131
msgid "} 使组件接受全局样式 默认情况下，自定义组件的样式只受到自定义组件 wxss 的影响。除非以下两种情况："
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:135
msgid "app.wxss 或页面的 wxss 中使用了标签名选择器（或一些其他特殊选择器）来直接指定样式，这些选择器会影响到页面和全部组件。通常情况下这是不推荐的做法。 在特定的自定义组件激活了 addGlobalClass 选项，这使得这个自定义组件能被 app.wxss 或页面的 wxss 中的所有的样式定义影响。 要激活 addGlobalClass 选项，只需要在 Component 构造器中将 options.addGlobalClass 字段置为 true 。这个特性从小程序基础库版本 2.2.3 开始支持。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:139
msgid "注意：当激活了 addGlobalClass 选项后，存在外部样式污染组件样式的风险，请谨慎选择。"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:148
msgid "addGlobalClass: true,"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:149
#: ../../source/framework/custom-component/wxml-wxss.rst:158
msgid "}"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:150
msgid "}) <!-- 组件 custom-component.wxml --> <text class=\"red-text\">"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:153
msgid "这段文本的颜色由 `app.wxss` 和页面 `wxss` 中的样式定义来决定"
msgstr ""

#: ../../source/framework/custom-component/wxml-wxss.rst:154
msgid "</text> /* app.wxss */ .red-text {"
msgstr ""

