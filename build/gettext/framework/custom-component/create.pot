# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Nosy
# This file is distributed under the same license as the wxadev package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: wxadev \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 22:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/framework/custom-component/create.rst:3
msgid ":wxfrwk:`自定义组件 <custom-component/custom-component>`"
msgstr ""

#: ../../source/framework/custom-component/create.rst:5
msgid "从小程序基础库版本 1.6.3 开始，小程序支持简洁的组件化编程。所有自定义组件相关特性都需要基础库版本 1.6.3 或更高。"
msgstr ""

#: ../../source/framework/custom-component/create.rst:7
msgid "开发者可以将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用；也可以将复杂的页面拆分成多个低耦合的模块，有助于代码维护。自定义组件在使用时与基础组件非常相似。"
msgstr ""

#: ../../source/framework/custom-component/create.rst:9
msgid "创建自定义组件 类似于页面，一个自定义组件由 json wxml wxss js 4个文件组成。要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明（将 component 字段设为 true 可这一组文件设为自定义组件）："
msgstr ""

#: ../../source/framework/custom-component/create.rst:12
#: ../../source/framework/custom-component/create.rst:58
msgid "{"
msgstr ""

#: ../../source/framework/custom-component/create.rst:13
msgid "\"component\": true"
msgstr ""

#: ../../source/framework/custom-component/create.rst:14
msgid "} 同时，还要在 wxml 文件中编写组件模板，在 wxss 文件中加入组件样式，它们的写法与页面的写法类似。具体细节和注意事项参见 组件模板和样式 。"
msgstr ""

#: ../../source/framework/custom-component/create.rst:17
#: ../../source/framework/custom-component/create.rst:34
#: ../../source/framework/custom-component/create.rst:65
msgid "代码示例："
msgstr ""

#: ../../source/framework/custom-component/create.rst:19
msgid "<!-- 这是自定义组件的内部WXML结构 --> <view class=\"inner\">"
msgstr ""

#: ../../source/framework/custom-component/create.rst:21
msgid "{{innerText}}"
msgstr ""

#: ../../source/framework/custom-component/create.rst:22
msgid "</view> <slot></slot> /* 这里的样式只应用于这个自定义组件 */ .inner {"
msgstr ""

#: ../../source/framework/custom-component/create.rst:26
msgid "color: red;"
msgstr ""

#: ../../source/framework/custom-component/create.rst:27
msgid "} 注意：在组件wxss中不应使用ID选择器、属性选择器和标签名选择器。"
msgstr ""

#: ../../source/framework/custom-component/create.rst:30
msgid "在自定义组件的 js 文件中，需要使用 Component 来注册组件，并提供组件的属性定义、内部数据和自定义方法。"
msgstr ""

#: ../../source/framework/custom-component/create.rst:32
msgid "组件的属性值和内部数据将被用于组件 wxml 的渲染，其中，属性值是可由组件外部传入的。更多细节参见 Component构造器 。"
msgstr ""

#: ../../source/framework/custom-component/create.rst:50
msgid "Component({"
msgstr ""

#: ../../source/framework/custom-component/create.rst:41
msgid "properties: {"
msgstr ""

#: ../../source/framework/custom-component/create.rst:38
msgid "// 这里定义了innerText属性，属性值可以在组件使用时指定 innerText: {"
msgstr ""

#: ../../source/framework/custom-component/create.rst:40
msgid "type: String, value: 'default value',"
msgstr ""

#: ../../source/framework/custom-component/create.rst:42
#: ../../source/framework/custom-component/create.rst:51
#: ../../source/framework/custom-component/create.rst:59
msgid "}"
msgstr ""

#: ../../source/framework/custom-component/create.rst:43
msgid "}, data: {"
msgstr ""

#: ../../source/framework/custom-component/create.rst:45
msgid "// 这里是一些组件内部数据 someData: {}"
msgstr ""

#: ../../source/framework/custom-component/create.rst:47
msgid "}, methods: {"
msgstr ""

#: ../../source/framework/custom-component/create.rst:49
msgid "// 这里是一个自定义方法 customMethod() {}"
msgstr ""

#: ../../source/framework/custom-component/create.rst:52
msgid "}) 使用自定义组件 使用已注册的自定义组件前，首先要在页面的 json 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径："
msgstr ""

#: ../../source/framework/custom-component/create.rst:57
msgid "\"usingComponents\": {"
msgstr ""

#: ../../source/framework/custom-component/create.rst:58
msgid "\"component-tag-name\": \"path/to/the/custom/component\""
msgstr ""

#: ../../source/framework/custom-component/create.rst:60
msgid "} 这样，在页面的 wxml 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。"
msgstr ""

#: ../../source/framework/custom-component/create.rst:63
msgid "开发者工具 1.02.1810190 及以上版本支持在 app.json 中声明 usingComponents 字段，在此处声明的自定义组件视为全局自定义组件，在小程序内的页面或自定义组件中可以直接使用而无需再声明。"
msgstr ""

#: ../../source/framework/custom-component/create.rst:67
msgid "在开发者工具中预览效果"
msgstr ""

#: ../../source/framework/custom-component/create.rst:70
msgid "<view>"
msgstr ""

#: ../../source/framework/custom-component/create.rst:70
msgid "<!-- 以下是对一个自定义组件的引用 --> <component-tag-name inner-text=\"Some text\"></component-tag-name>"
msgstr ""

#: ../../source/framework/custom-component/create.rst:72
msgid "</view> 自定义组件的 wxml 节点结构在与数据结合之后，将被插入到引用位置内。"
msgstr ""

#: ../../source/framework/custom-component/create.rst:75
msgid "细节注意事项 一些需要注意的细节："
msgstr ""

#: ../../source/framework/custom-component/create.rst:78
msgid "因为 WXML 节点标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名也只能包含这些字符。 自定义组件也是可以引用自定义组件的，引用方法类似于页面引用自定义组件的方式（使用 usingComponents 字段）。 自定义组件和页面所在项目根目录名不能以“wx-”为前缀，否则会报错。 注意，是否在页面文件中使用 usingComponents 会使得页面的 this 对象的原型稍有差异，包括："
msgstr ""

#: ../../source/framework/custom-component/create.rst:83
msgid "使用 usingComponents 页面的原型与不使用时不一致，即 Object.getPrototypeOf(this) 结果不同。 使用 usingComponents 时会多一些方法，如 selectComponent 。 出于性能考虑，使用 usingComponents 时， setData 内容不会被直接深复制，即 this.setData({ field: obj }) 后 this.data.field === obj 。（深复制会在这个值被组件间传递时发生。） 如果页面比较复杂，新增或删除 usingComponents 定义段时建议重新测试一下。"
msgstr ""

